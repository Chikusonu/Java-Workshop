package bank_system_case_study;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Timestamp;
import java.util.Scanner;

public class customer {

	public static void main(String[] args) {
		try {
			Connection conn = DriverManager.getConnection("jdbc:mysql://localhost/bank_system", "root", "root");
			Scanner sc = new Scanner(System.in);

			while (true) {
				System.out.println("Customer Login");
				System.out.println("1. Deposit ");
				System.out.println("2. Withdraw");
				System.out.println("3. Mini Statement");
				System.out.println("4. Transfer ");
				System.out.println("5. Exit");
				System.out.println("Enter the Choice");
				int choice = sc.nextInt();

				int accno;
				double accdepo;
				double account_balance = 0;
				int rowsAffectedUpdate = 0;

				switch (choice) {

				case 1:
					System.out.println("---*** Customer Deposit Panel ***---");
					System.out.println("Enter the Account Number");
					accno = sc.nextInt();
					System.out.println("Enter the Deposit Amount");
					accdepo = sc.nextDouble();

					// Update account balance
					String depositQuery = "UPDATE banksystem SET acc_balance = acc_balance + ? WHERE acc_no = ?";
					PreparedStatement depositStmt = conn.prepareStatement(depositQuery);
					depositStmt.setDouble(1, accdepo);
					depositStmt.setInt(2, accno);
					rowsAffectedUpdate = depositStmt.executeUpdate();

					if (rowsAffectedUpdate > 0) {
						System.out.println("Deposited successfully! Rows affected: " + rowsAffectedUpdate);

						// Insert deposit transaction into transactions table
						String depositTransactionQuery = "INSERT INTO transactions (acc_no, transaction_type, transaction_amount, transaction_datetime) VALUES (?, ?, ?, NOW())";
						PreparedStatement depositTransactionStmt = conn.prepareStatement(depositTransactionQuery);
						depositTransactionStmt.setInt(1, accno);
						depositTransactionStmt.setString(2, "Deposit");
						depositTransactionStmt.setDouble(3, accdepo);
						depositTransactionStmt.executeUpdate();
					} else {
						System.out.println("Deposit failed. Rows affected: " + rowsAffectedUpdate);
					}
					break;


				case 2:
					System.out.println("---*** Customer Withdrawal Panel ***---");
					System.out.println("Enter the Account Number");
					accno = sc.nextInt();
					System.out.println("Enter the Withdrawal Amount");
					accdepo = sc.nextDouble();

					// Get the current account balance
					String getBalanceQuery = "SELECT acc_balance FROM banksystem WHERE acc_no = ?";
					PreparedStatement balanceStmt = conn.prepareStatement(getBalanceQuery);
					balanceStmt.setInt(1, accno);
					ResultSet balanceResult = balanceStmt.executeQuery();

					double currentBalance = 0;
					if (balanceResult.next()) {
						currentBalance = balanceResult.getDouble("acc_balance");
					}

					if (currentBalance >= accdepo) {
						// Update account balance
						String withdrawalQuery = "UPDATE banksystem SET acc_balance = acc_balance - ? WHERE acc_no = ?";
						PreparedStatement withdrawalStmt = conn.prepareStatement(withdrawalQuery);
						withdrawalStmt.setDouble(1, accdepo);
						withdrawalStmt.setInt(2, accno);
						rowsAffectedUpdate = withdrawalStmt.executeUpdate();

						if (rowsAffectedUpdate > 0) {
							System.out.println("Withdrawal successfully! Rows affected: " + rowsAffectedUpdate);

							// Insert withdrawal transaction into transactions table
							String withdrawalTransactionQuery = "INSERT INTO transactions (acc_no, transaction_type, transaction_amount, transaction_datetime) VALUES (?, ?, ?, NOW())";
							PreparedStatement withdrawalTransactionStmt = conn.prepareStatement(withdrawalTransactionQuery);
							withdrawalTransactionStmt.setInt(1, accno);
							withdrawalTransactionStmt.setString(2, "Withdrawal");
							withdrawalTransactionStmt.setDouble(3, accdepo);
							withdrawalTransactionStmt.executeUpdate();
						} else {
							System.out.println("Withdrawal failed. Rows affected: " + rowsAffectedUpdate);
						}
					} else {
						System.out.println("Insufficient balance.");
					}
					break;




				case 3:
					System.out.println("---*** Mini Statement Panel ***---");
					System.out.println("Enter the Account Number");
					accno = sc.nextInt();

					String miniStatementQuery = "SELECT * FROM transactions WHERE acc_no = ? ORDER BY transaction_datetime DESC LIMIT 5";
					PreparedStatement miniStmt = conn.prepareStatement(miniStatementQuery);
					miniStmt.setInt(1, accno);

					ResultSet miniResultSet = miniStmt.executeQuery();

					System.out.println("Mini Statement:");
					System.out.println("----------------");
					while (miniResultSet.next()) {
						String transaction_type = miniResultSet.getString("transaction_type");
						double transaction_amount = miniResultSet.getDouble("transaction_amount");
						Timestamp transaction_datetime = miniResultSet.getTimestamp("transaction_datetime");
						System.out.println("Transaction Type: " + transaction_type);
						System.out.println("Transaction Amount: " + transaction_amount);
						System.out.println("Transaction Date and Time: " + transaction_datetime);
						System.out.println("----------------");
					}
					break;
				case 4:
				    System.out.println("---*** Customer Transfer Panel ***---");
				    System.out.println("Enter Your Account Number ");
				    accno = sc.nextInt();
				    System.out.println("Enter Sender Account Number ");
				    int send_acc_no = sc.nextInt();
				    System.out.println("Enter the Amount");
				    double send_acc_dep = sc.nextDouble();

				    // Check if the sender's account balance is sufficient for the transfer
				    String senderBalanceQuery = "SELECT acc_balance FROM banksystem WHERE acc_no = ?";
				    PreparedStatement senderBalanceStmt = conn.prepareStatement(senderBalanceQuery);
				    senderBalanceStmt.setInt(1, send_acc_no);
				    ResultSet senderBalanceResult = senderBalanceStmt.executeQuery();

				    double senderAccountBalance = 0;
				    if (senderBalanceResult.next()) {
				        senderAccountBalance = senderBalanceResult.getDouble("acc_balance");
				    }

				    if (senderAccountBalance >= send_acc_dep) {
				        // Update sender's account balance (deduct the transfer amount)
				        String updateSenderBalanceQuery = "UPDATE banksystem SET acc_balance = acc_balance - ? WHERE acc_no = ?";
				        PreparedStatement updateSenderBalanceStmt = conn.prepareStatement(updateSenderBalanceQuery);
				        updateSenderBalanceStmt.setDouble(1, send_acc_dep);
				        updateSenderBalanceStmt.setInt(2, send_acc_no);
				        updateSenderBalanceStmt.executeUpdate();

				        // Update recipient's account balance (add the transfer amount)
				        String updateRecipientBalanceQuery = "UPDATE banksystem SET acc_balance = acc_balance + ? WHERE acc_no = ?";
				        PreparedStatement updateRecipientBalanceStmt = conn.prepareStatement(updateRecipientBalanceQuery);
				        updateRecipientBalanceStmt.setDouble(1, send_acc_dep);
				        updateRecipientBalanceStmt.setInt(2, accno);
				        rowsAffectedUpdate = updateRecipientBalanceStmt.executeUpdate();

				        if (rowsAffectedUpdate > 0) {
				            System.out.println("Transfer successful! Rows affected: " + rowsAffectedUpdate);

				            // Insert transfer transaction records into the 'transactions' table
				            String senderTransactionQuery = "INSERT INTO transactions (acc_no, transaction_type, transaction_amount, transaction_datetime) VALUES (?, ?, ?, NOW())";
				            PreparedStatement senderTransactionStmt = conn.prepareStatement(senderTransactionQuery);
				            senderTransactionStmt.setInt(1, send_acc_no);
				            senderTransactionStmt.setString(2, "Transfer (Sent)");
				            senderTransactionStmt.setDouble(3, send_acc_dep);
				            senderTransactionStmt.executeUpdate();

				            String recipientTransactionQuery = "INSERT INTO transactions (acc_no, transaction_type, transaction_amount, transaction_datetime) VALUES (?, ?, ?, NOW())";
				            PreparedStatement recipientTransactionStmt = conn.prepareStatement(recipientTransactionQuery);
				            recipientTransactionStmt.setInt(1, accno);
				            recipientTransactionStmt.setString(2, "Transfer (Received)");
				            recipientTransactionStmt.setDouble(3, send_acc_dep);
				            recipientTransactionStmt.executeUpdate();
				        } else {
				            System.out.println("Transfer failed. Rows affected: " + rowsAffectedUpdate);
				        }
				    } else {
				        System.out.println("Insufficient balance for the sender.");
				    }
				    break;

				



				case 5:
					System.out.println("Exiting...");
					conn.close();
					System.exit(0);
					break;

				default:
					System.out.println("Invalid choice.");
					break;
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
}
